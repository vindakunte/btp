{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2a48994",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:27:28.279431Z",
     "iopub.status.busy": "2024-05-27T03:27:28.279176Z",
     "iopub.status.idle": "2024-05-27T03:27:46.384963Z",
     "shell.execute_reply": "2024-05-27T03:27:46.383728Z"
    },
    "papermill": {
     "duration": 18.114161,
     "end_time": "2024-05-27T03:27:46.387447",
     "exception": false,
     "start_time": "2024-05-27T03:27:28.273286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "E: Unable to locate package python-rdkit\r\n",
      "Collecting rdkit\r\n",
      "  Downloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.9 kB)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from rdkit) (1.26.4)\r\n",
      "Requirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from rdkit) (9.5.0)\r\n",
      "Downloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.9/34.9 MB\u001b[0m \u001b[31m42.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: rdkit\r\n",
      "Successfully installed rdkit-2023.9.6\r\n"
     ]
    }
   ],
   "source": [
    "!apt-get install -y python-rdkit librdkit1 rdkit-data\n",
    "!pip install rdkit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "19e23fb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:27:46.403860Z",
     "iopub.status.busy": "2024-05-27T03:27:46.402966Z",
     "iopub.status.idle": "2024-05-27T03:28:01.327863Z",
     "shell.execute_reply": "2024-05-27T03:28:01.326726Z"
    },
    "papermill": {
     "duration": 14.935443,
     "end_time": "2024-05-27T03:28:01.330259",
     "exception": false,
     "start_time": "2024-05-27T03:27:46.394816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting ogb\r\n",
      "  Downloading ogb-1.3.6-py3-none-any.whl.metadata (6.2 kB)\r\n",
      "Requirement already satisfied: torch>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (2.1.2)\r\n",
      "Requirement already satisfied: numpy>=1.16.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (1.26.4)\r\n",
      "Requirement already satisfied: tqdm>=4.29.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (4.66.1)\r\n",
      "Requirement already satisfied: scikit-learn>=0.20.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (1.2.2)\r\n",
      "Requirement already satisfied: pandas>=0.24.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (2.1.4)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (1.16.0)\r\n",
      "Requirement already satisfied: urllib3>=1.24.0 in /opt/conda/lib/python3.10/site-packages (from ogb) (1.26.18)\r\n",
      "Collecting outdated>=0.2.0 (from ogb)\r\n",
      "  Downloading outdated-0.2.2-py2.py3-none-any.whl.metadata (4.7 kB)\r\n",
      "Requirement already satisfied: setuptools>=44 in /opt/conda/lib/python3.10/site-packages (from outdated>=0.2.0->ogb) (69.0.3)\r\n",
      "Collecting littleutils (from outdated>=0.2.0->ogb)\r\n",
      "  Downloading littleutils-0.2.2.tar.gz (6.6 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from outdated>=0.2.0->ogb) (2.31.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->ogb) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->ogb) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->ogb) (2023.4)\r\n",
      "Requirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->ogb) (1.11.4)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->ogb) (1.3.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->ogb) (3.2.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (1.12)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (3.2.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->ogb) (2024.2.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.6.0->ogb) (2.1.3)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->outdated>=0.2.0->ogb) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->outdated>=0.2.0->ogb) (3.6)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->outdated>=0.2.0->ogb) (2024.2.2)\r\n",
      "Requirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.6.0->ogb) (1.3.0)\r\n",
      "Downloading ogb-1.3.6-py3-none-any.whl (78 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.8/78.8 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading outdated-0.2.2-py2.py3-none-any.whl (7.5 kB)\r\n",
      "Building wheels for collected packages: littleutils\r\n",
      "  Building wheel for littleutils (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25h  Created wheel for littleutils: filename=littleutils-0.2.2-py3-none-any.whl size=7026 sha256=a5ad07f1008a276c728cca4ca20b7a0a76173beec7dcae279da52f9340db3fcf\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/3d/fe/b0/27a9892da57472e538c7452a721a9cf463cc03cf7379889266\r\n",
      "Successfully built littleutils\r\n",
      "Installing collected packages: littleutils, outdated, ogb\r\n",
      "Successfully installed littleutils-0.2.2 ogb-1.3.6 outdated-0.2.2\r\n"
     ]
    }
   ],
   "source": [
    "!pip install ogb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0648a7c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:01.348790Z",
     "iopub.status.busy": "2024-05-27T03:28:01.348480Z",
     "iopub.status.idle": "2024-05-27T03:28:14.693028Z",
     "shell.execute_reply": "2024-05-27T03:28:14.692047Z"
    },
    "papermill": {
     "duration": 13.356578,
     "end_time": "2024-05-27T03:28:14.695533",
     "exception": false,
     "start_time": "2024-05-27T03:28:01.338955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting torch_geometric\r\n",
      "  Downloading torch_geometric-2.5.3-py3-none-any.whl.metadata (64 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.2/64.2 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (4.66.1)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.26.4)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.11.4)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (2024.2.0)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.1.2)\r\n",
      "Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.9.1)\r\n",
      "Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (2.31.0)\r\n",
      "Requirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.1.1)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.2.2)\r\n",
      "Requirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (5.9.3)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (23.2.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (6.0.4)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.9.3)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.4.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.3.1)\r\n",
      "Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (4.0.3)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch_geometric) (2.1.3)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (2024.2.2)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->torch_geometric) (1.3.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->torch_geometric) (3.2.0)\r\n",
      "Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m17.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: torch_geometric\r\n",
      "Successfully installed torch_geometric-2.5.3\r\n"
     ]
    }
   ],
   "source": [
    "!pip install torch_geometric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb2096e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:14.717819Z",
     "iopub.status.busy": "2024-05-27T03:28:14.717457Z",
     "iopub.status.idle": "2024-05-27T03:28:24.206019Z",
     "shell.execute_reply": "2024-05-27T03:28:24.204942Z"
    },
    "papermill": {
     "duration": 9.502528,
     "end_time": "2024-05-27T03:28:24.208570",
     "exception": false,
     "start_time": "2024-05-27T03:28:14.706042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from ogb.lsc import PygPCQM4Mv2Dataset, PCQM4Mv2Evaluator\n",
    "from ogb.graphproppred.mol_encoder import AtomEncoder,BondEncoder\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "from torch_geometric.nn import GINConv, GCNConv\n",
    "from torch_geometric.nn.pool import global_add_pool\n",
    "import torch.optim as optim\n",
    "from torch.optim.lr_scheduler import StepLR\n",
    "from torch_geometric.loader import DataLoader\n",
    "import os\n",
    "import time\n",
    "import random\n",
    "import numpy as np\n",
    "from tqdm.auto import tqdm\n",
    "from torch_geometric.datasets import PCQM4Mv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "abe9e6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.231372Z",
     "iopub.status.busy": "2024-05-27T03:28:24.230351Z",
     "iopub.status.idle": "2024-05-27T03:28:24.238534Z",
     "shell.execute_reply": "2024-05-27T03:28:24.237664Z"
    },
    "papermill": {
     "duration": 0.021594,
     "end_time": "2024-05-27T03:28:24.240687",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.219093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.random.seed(42)\n",
    "torch.manual_seed(42)\n",
    "torch.cuda.manual_seed(42)\n",
    "random.seed(42)\n",
    "device = torch.device('cuda')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c72ce47e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.260452Z",
     "iopub.status.busy": "2024-05-27T03:28:24.260169Z",
     "iopub.status.idle": "2024-05-27T03:28:24.273125Z",
     "shell.execute_reply": "2024-05-27T03:28:24.272204Z"
    },
    "papermill": {
     "duration": 0.025081,
     "end_time": "2024-05-27T03:28:24.275065",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.249984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GNN_graph(torch.nn.Module):\n",
    "    def __init__(self, num_layers=5, emb_dim=100, drop_ratio=0.5, gnn_type='GIN'):\n",
    "        super().__init__()\n",
    "        self.num_layers = num_layers\n",
    "        self.drop_ratio = drop_ratio\n",
    "        self.atom_encoder = AtomEncoder(emb_dim)\n",
    "        #self.bond_encoder = BondEncoder(emb_dim)\n",
    "        self.mlp = torch.nn.Sequential(torch.nn.Linear(emb_dim, emb_dim), torch.nn.BatchNorm1d(emb_dim), torch.nn.ReLU(), torch.nn.Linear(emb_dim, emb_dim))\n",
    "        \n",
    "        self.graph_pool = global_add_pool\n",
    "        self.linear_pred = torch.nn.Linear(emb_dim, 1)\n",
    "        \n",
    "        if self.num_layers<2:\n",
    "            raise ValueError(\"Number of layers must be more than 1\")\n",
    "            \n",
    "        self.convs = torch.nn.ModuleList()\n",
    "        self.norms = torch.nn.ModuleList()\n",
    "        \n",
    "        for i in range(num_layers):\n",
    "            if(gnn_type=='GIN'):\n",
    "                self.convs.append(GINConv(self.mlp))\n",
    "            elif(gnn_type=='GCN'):\n",
    "                self.convs.append(GCNConv(emb_dim, emb_dim, normalize=False))\n",
    "            else:\n",
    "                ValueError(\"Invalid GNN type called\")\n",
    "                \n",
    "            self.norms.append(torch.nn.BatchNorm1d(emb_dim))\n",
    "            \n",
    "    def forward(self, batched_data):\n",
    "        x, edge_index, edge_attr, batch = batched_data.x, batched_data.edge_index, batched_data.edge_attr, batched_data.batch\n",
    "        #edge_embedding = self.bond_encoder(edge_attr)\n",
    "        h_list = [self.atom_encoder(x)]\n",
    "        for layer in range(self.num_layers):\n",
    "\n",
    "            h = self.convs[layer](h_list[layer], edge_index)\n",
    "            h = self.norms[layer](h)\n",
    "\n",
    "            if layer == self.num_layers - 1:\n",
    "                #remove relu for the last layer\n",
    "                h = F.dropout(h, self.drop_ratio, training = self.training)\n",
    "            else:\n",
    "                h = F.dropout(F.relu(h), self.drop_ratio, training = self.training)\n",
    "\n",
    "            h_list.append(h)\n",
    "            \n",
    "            \n",
    "        node_feat = h_list[-1]\n",
    "        graph_feat = self.graph_pool(node_feat, batch)\n",
    "        output = self.linear_pred(graph_feat)\n",
    "        \n",
    "        \n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5d3eaedb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.294718Z",
     "iopub.status.busy": "2024-05-27T03:28:24.294430Z",
     "iopub.status.idle": "2024-05-27T03:28:24.300380Z",
     "shell.execute_reply": "2024-05-27T03:28:24.299533Z"
    },
    "papermill": {
     "duration": 0.018004,
     "end_time": "2024-05-27T03:28:24.302224",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.284220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test(model, device, loader):\n",
    "    model.eval()\n",
    "    \n",
    "    y_pred = []\n",
    "\n",
    "    for step, batch in enumerate(tqdm(loader, desc=\"Iteration\")):\n",
    "        batch = batch.to(device)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            pred = model(batch).view(-1,)\n",
    "\n",
    "        y_pred.append(pred.detach().cpu())\n",
    "\n",
    "    y_pred = torch.cat(y_pred, dim = 0)\n",
    "    \n",
    "    out = []\n",
    "    for pred in y_pred:\n",
    "        out.append(pred)\n",
    "\n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "68a2b13c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.322505Z",
     "iopub.status.busy": "2024-05-27T03:28:24.322222Z",
     "iopub.status.idle": "2024-05-27T03:28:24.326354Z",
     "shell.execute_reply": "2024-05-27T03:28:24.325398Z"
    },
    "papermill": {
     "duration": 0.01676,
     "end_time": "2024-05-27T03:28:24.328447",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.311687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from ogb.utils import smiles2graph\n",
    "from torch_geometric.data import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6902e593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.349643Z",
     "iopub.status.busy": "2024-05-27T03:28:24.349359Z",
     "iopub.status.idle": "2024-05-27T03:28:24.356752Z",
     "shell.execute_reply": "2024-05-27T03:28:24.355930Z"
    },
    "papermill": {
     "duration": 0.020509,
     "end_time": "2024-05-27T03:28:24.358617",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.338108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class OnTheFlyPCQMDataset(object):\n",
    "    def __init__(self, smiles_list, smiles2graph=smiles2graph):\n",
    "        super(OnTheFlyPCQMDataset, self).__init__()\n",
    "        self.smiles_list = smiles_list \n",
    "        self.smiles2graph = smiles2graph\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        '''Get datapoint with index'''\n",
    "        data = Data()\n",
    "        smiles, y = self.smiles_list[idx]\n",
    "        graph = self.smiles2graph(smiles)\n",
    "\n",
    "        data.__num_nodes__ = int(graph['num_nodes'])\n",
    "        data.edge_index = torch.from_numpy(graph['edge_index']).to(torch.int64)\n",
    "        data.edge_attr = torch.from_numpy(graph['edge_feat']).to(torch.int64)\n",
    "        data.x = torch.from_numpy(graph['node_feat']).to(torch.int64)\n",
    "        \n",
    "        return data\n",
    "    \n",
    "    def __len__(self):\n",
    "        '''Length of the dataset\n",
    "        Returns\n",
    "        -------\n",
    "        int\n",
    "            Length of Dataset\n",
    "        '''\n",
    "        return len(self.smiles_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "533a9c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.378517Z",
     "iopub.status.busy": "2024-05-27T03:28:24.378259Z",
     "iopub.status.idle": "2024-05-27T03:28:24.390812Z",
     "shell.execute_reply": "2024-05-27T03:28:24.390048Z"
    },
    "papermill": {
     "duration": 0.02532,
     "end_time": "2024-05-27T03:28:24.393191",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.367871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/btp-data/Btp - Sheet1.csv\")\n",
    "test_data = df.values.tolist()\n",
    "onthefly_data = OnTheFlyPCQMDataset(test_data)\n",
    "loader = DataLoader(onthefly_data, batch_size=10, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4ab78c71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.415825Z",
     "iopub.status.busy": "2024-05-27T03:28:24.415494Z",
     "iopub.status.idle": "2024-05-27T03:28:24.884245Z",
     "shell.execute_reply": "2024-05-27T03:28:24.883264Z"
    },
    "papermill": {
     "duration": 0.483189,
     "end_time": "2024-05-27T03:28:24.886569",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.403380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GNN_graph(\n",
       "  (atom_encoder): AtomEncoder(\n",
       "    (atom_embedding_list): ModuleList(\n",
       "      (0): Embedding(119, 200)\n",
       "      (1): Embedding(5, 200)\n",
       "      (2-3): 2 x Embedding(12, 200)\n",
       "      (4): Embedding(10, 200)\n",
       "      (5-6): 2 x Embedding(6, 200)\n",
       "      (7-8): 2 x Embedding(2, 200)\n",
       "    )\n",
       "  )\n",
       "  (mlp): Sequential(\n",
       "    (0): Linear(in_features=200, out_features=200, bias=True)\n",
       "    (1): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (2): ReLU()\n",
       "    (3): Linear(in_features=200, out_features=200, bias=True)\n",
       "  )\n",
       "  (linear_pred): Linear(in_features=200, out_features=1, bias=True)\n",
       "  (convs): ModuleList(\n",
       "    (0-4): 5 x GINConv(nn=Sequential(\n",
       "      (0): Linear(in_features=200, out_features=200, bias=True)\n",
       "      (1): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): ReLU()\n",
       "      (3): Linear(in_features=200, out_features=200, bias=True)\n",
       "    ))\n",
       "  )\n",
       "  (norms): ModuleList(\n",
       "    (0-4): 5 x BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gcn = GNN_graph(num_layers=5, emb_dim=200, drop_ratio=0.5, gnn_type='GCN')\n",
    "gcn_checkpoint = torch.load('/kaggle/input/checkpoint-gcn/checkpoint (1).pt')\n",
    "gcn.load_state_dict(gcn_checkpoint['model_state_dict'])\n",
    "gcn.to(device)\n",
    "\n",
    "gin = GNN_graph(num_layers=5, emb_dim=200, drop_ratio=0.5, gnn_type='GIN')\n",
    "gin_checkpoint = torch.load('/kaggle/input/checkpoint-gin/checkpoint (2).pt')\n",
    "gin.load_state_dict(gin_checkpoint['model_state_dict'])\n",
    "gin.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fe1117d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:24.907526Z",
     "iopub.status.busy": "2024-05-27T03:28:24.907215Z",
     "iopub.status.idle": "2024-05-27T03:28:25.759163Z",
     "shell.execute_reply": "2024-05-27T03:28:25.758239Z"
    },
    "papermill": {
     "duration": 0.864317,
     "end_time": "2024-05-27T03:28:25.761040",
     "exception": false,
     "start_time": "2024-05-27T03:28:24.896723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicting on test data...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0196291916304a40a32cbf2fd47edd33",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Iteration:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f78a7c40c8f94d1099f7876ea8d15bdf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Iteration:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Predicting on test data...\")\n",
    "gin_pred = test(gin, device, loader)\n",
    "gcn_pred = test(gcn, device, loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "07e93b7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:25.782521Z",
     "iopub.status.busy": "2024-05-27T03:28:25.782222Z",
     "iopub.status.idle": "2024-05-27T03:28:25.812281Z",
     "shell.execute_reply": "2024-05-27T03:28:25.811451Z"
    },
    "papermill": {
     "duration": 0.04389,
     "end_time": "2024-05-27T03:28:25.814895",
     "exception": false,
     "start_time": "2024-05-27T03:28:25.771005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_gin = pd.DataFrame(gin_pred)\n",
    "df_gin.to_csv('gin_predictions.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a220a77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T03:28:25.836671Z",
     "iopub.status.busy": "2024-05-27T03:28:25.836381Z",
     "iopub.status.idle": "2024-05-27T03:28:25.844658Z",
     "shell.execute_reply": "2024-05-27T03:28:25.843958Z"
    },
    "papermill": {
     "duration": 0.021153,
     "end_time": "2024-05-27T03:28:25.846631",
     "exception": false,
     "start_time": "2024-05-27T03:28:25.825478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_gcn = pd.DataFrame(gcn_pred)\n",
    "df_gcn.to_csv('gcn_predictions.csv', index = False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 3930020,
     "sourceId": 6835614,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4788238,
     "sourceId": 8106816,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4788248,
     "sourceId": 8106827,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 171788295,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 62.089872,
   "end_time": "2024-05-27T03:28:27.680260",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-27T03:27:25.590388",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0196291916304a40a32cbf2fd47edd33": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9ec19bd26e4a432fa373bdaec7edeb14",
        "IPY_MODEL_1b3047893cd74e2eb3ec010942405c03",
        "IPY_MODEL_a97a874afb6b445aa775c75ee0eeea3e"
       ],
       "layout": "IPY_MODEL_9999fa2bbdce4560b433997a1b903a81"
      }
     },
     "05417b94212941cf9c569a19a9e8d6d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1b3047893cd74e2eb3ec010942405c03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_7e741c0aa853433392d167d31cb105aa",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_39049ff349f04afbb2224f368c5db32d",
       "value": 1.0
      }
     },
     "3508a095253046808b5fa43769092d32": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "37d2d0820ea24de2a54a801a2c98b61d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9a161b545aca4acda0195298c168a87b",
       "placeholder": "​",
       "style": "IPY_MODEL_8d7db296dd444fc2bf51c94aff5f3760",
       "value": " 1/1 [00:00&lt;00:00, 29.62it/s]"
      }
     },
     "39049ff349f04afbb2224f368c5db32d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4e190e54724a43f9821bb4d20350e320": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a91b6afb846484d8572b8a49dddf986": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7b0411e842224e0aaf6e26125540b987": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "7e741c0aa853433392d167d31cb105aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c65bd5a92d247f4b6a2bb9489cba343": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8d7db296dd444fc2bf51c94aff5f3760": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "9999fa2bbdce4560b433997a1b903a81": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a161b545aca4acda0195298c168a87b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9ec19bd26e4a432fa373bdaec7edeb14": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b90f6ff226764683841fe4de05ea3bd3",
       "placeholder": "​",
       "style": "IPY_MODEL_ac649186344443a7967dd0d34b97f40b",
       "value": "Iteration: 100%"
      }
     },
     "a297ea1110554b0994d1af5fa1f960fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a97a874afb6b445aa775c75ee0eeea3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_05417b94212941cf9c569a19a9e8d6d1",
       "placeholder": "​",
       "style": "IPY_MODEL_3508a095253046808b5fa43769092d32",
       "value": " 1/1 [00:00&lt;00:00,  1.24it/s]"
      }
     },
     "ac649186344443a7967dd0d34b97f40b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "b90f6ff226764683841fe4de05ea3bd3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be75dff5ba0c44a18875b181fd7666ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4e190e54724a43f9821bb4d20350e320",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8c65bd5a92d247f4b6a2bb9489cba343",
       "value": 1.0
      }
     },
     "e5abf6fa531f49ae864d37e0e12e07dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a297ea1110554b0994d1af5fa1f960fa",
       "placeholder": "​",
       "style": "IPY_MODEL_7b0411e842224e0aaf6e26125540b987",
       "value": "Iteration: 100%"
      }
     },
     "f78a7c40c8f94d1099f7876ea8d15bdf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e5abf6fa531f49ae864d37e0e12e07dc",
        "IPY_MODEL_be75dff5ba0c44a18875b181fd7666ad",
        "IPY_MODEL_37d2d0820ea24de2a54a801a2c98b61d"
       ],
       "layout": "IPY_MODEL_6a91b6afb846484d8572b8a49dddf986"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
